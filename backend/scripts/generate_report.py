import os
import sqlite3
import psycopg2
from psycopg2.extras import RealDictCursor

from datetime import datetime
from statistics import median
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle,
    PageBreak, PageTemplate, Frame, Image,KeepTogether
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib.enums import TA_RIGHT, TA_CENTER
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.lineplots import LinePlot
from reportlab.graphics.widgets.markers import makeMarker
import sys
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch

from reportlab.platypus import Image

base_dir = os.path.dirname(__file__)
logo_left = Image(os.path.join(base_dir, "prplogo.png"), width=60, height=60)
logo_center = Image(os.path.join(base_dir, "prpheader.png"), width=264, height=53)
logo_right = Image(os.path.join(base_dir, "naac_logo.png"), width=100, height=57)


def add_page_footer(canvas_obj, doc):
    footer_text = "This report was generated by POTEntial Interview Analysis Platform."
    page_num_text = f"Page {doc.page}"

    canvas_obj.saveState()
    canvas_obj.setFont("Helvetica", 8)
    
    # Footer note (left aligned)
    canvas_obj.drawString(inch, 0.5 * inch, footer_text)
    
    # Page number (right aligned)
    canvas_obj.drawRightString(doc.pagesize[0] - inch, 0.5 * inch, page_num_text)
    canvas_obj.restoreState()


# SET THIS TO A VALID INTERVIEW ID FOR TESTING
 # Replace with a valid interview_id
interview_id = int(sys.argv[1])
output_path = sys.argv[2]
os.makedirs(os.path.dirname(output_path), exist_ok=True)
# Ensure output directory
output_dir = os.path.join(os.path.dirname(__file__), "..", "tmp")
os.makedirs(output_dir, exist_ok=True)
output_path = os.path.join(output_dir, f"interview_{interview_id}.pdf")

# Database setup

conn = psycopg2.connect(
    dbname=os.getenv("PG_DBNAME", "mock_interview_db"),
    user=os.getenv("PG_USER", "mockuser"),
    password=os.getenv("PG_PASSWORD", "user@pass"),
    host=os.getenv("PG_HOST", "localhost"),
    port=os.getenv("PG_PORT", "5432"),
    cursor_factory=RealDictCursor  # Makes rows behave like dicts
)
cursor = conn.cursor()


# Fetch interview and user data
cursor.execute("""
SELECT i.*, u.name, u.email, u.phone_number 
FROM interviews i 
JOIN users u ON u.id = i.user_id 
WHERE i.id = %s
""", (interview_id,))
interview = cursor.fetchone()


# Fetch questions
cursor.execute("SELECT * FROM interview_questions WHERE interview_id = %s", (interview_id,))
questions = cursor.fetchall()


# Styles and PDF setup
styles = getSampleStyleSheet()
styles.add(ParagraphStyle(name="RightAlign", alignment=TA_RIGHT))
styles.add(ParagraphStyle(name="CenterAlign", alignment=TA_CENTER))
styles.add(ParagraphStyle(name="Small", fontSize=8))

# Generate unique report ID
unique_report_id = f"POT-{interview_id:06}-{datetime.now().strftime('%Y%m%d')}"

# Footer
def footer(canvas, doc):
    canvas.saveState()
    canvas.setFont("Helvetica-Oblique", 8)
    canvas.drawString(72, 15, "This report was generated by POTEntial – the Mock Interview Evaluation Platform")
    canvas.drawRightString(550, 15, f"Page {doc.page}")
    canvas.restoreState()

frame = Frame(40, 40, 530, 720, id='normal')
doc = SimpleDocTemplate(output_path, pagesize=letter)
doc.addPageTemplates([PageTemplate(id='PageWithFooter', frames=[frame], onPage=footer)])

# Document elements
elements = []

#logo section
logo_table = Table(
    [[logo_left, logo_center, logo_right]],
    colWidths=[doc.width / 3.0] * 3
)
logo_table.setStyle(TableStyle([
    ('ALIGN', (0, 0), (0, 0), 'LEFT'),
    ('ALIGN', (1, 0), (1, 0), 'CENTER'),
    ('ALIGN', (2, 0), (2, 0), 'RIGHT'),
    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
    ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ('TOPPADDING', (0, 0), (-1, -1), 0),
]))

# elements.append(logo_table)


# Header section
# === Header ===
elements.append(Paragraph("Interview Report", styles["Title"]))
elements.append(Spacer(1, 6))

# User info (Name in bold, followed by contact info)
elements.append(Paragraph(f"<b>{interview['name']}</b>", styles["Heading3"]))
elements.append(Paragraph(f"{interview['email']} | {interview['phone_number']}", styles["Normal"]))
elements.append(Paragraph(f"<para align='right'><b>Report ID:</b> {unique_report_id}</para>", styles["Normal"]))
elements.append(Spacer(1, 18))


# Interview details
elements.append(Paragraph("Interview Details", styles["Heading2"]))
elements.append(Paragraph(f"Domain: {interview['domain']}", styles["Normal"]))
elements.append(Paragraph(f"Level: {interview['level']}", styles["Normal"]))
elements.append(Paragraph(f"Total Questions: {len(questions)}", styles["Normal"]))
elements.append(Spacer(1, 12))

# Overall scores
elements.append(Paragraph("Overall Scores", styles["Heading2"]))
overall_data = [
    ["Fluency", "Confidence", "Lexical", "Grammar", "Subject Knowledge"],
    [
        f"{interview['fluency']}%",
        f"{interview['confidence']}%",
        f"{interview['lexical']}%",
        f"{interview['grammar_language']}%",
        f"{interview['subject_knowledge']}%"
    ]
]
table = Table(overall_data)
table.setStyle(TableStyle([
    ("BACKGROUND", (0, 0), (-1, 0), colors.lightblue),
    ("TEXTCOLOR", (0, 0), (-1, 0), colors.black),
    ("ALIGN", (0, 0), (-1, -1), "CENTER"),
    ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
    ("BOX", (0, 0), (-1, -1), 1, colors.black),
    ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
]))
elements.append(table)
elements.append(Spacer(1, 18))

# Ideal ranges
ideal_ranges = {
    "speech_rate_wpm": "120–160 wpm",
    "pause_ratio": "0.1–0.3",
    "tempo_variation": "< 0.5",
    "avg_pitch": "85–180 Hz (m), 165–255 Hz (f)",
    "pitch_variation": "20–60 Hz",
    "prosody_slope": "~ 0",
    "jitter": "< 0.03",
    "shimmer": "< 0.05",
    "loudness": "0.02–0.08",
    "energy_variability": "0.01–0.05",
    "formant_f1": "200 – 1000 Hz",
    "formant_f2": "800 – 2500 Hz",
    "type_token_ratio": "Higher is better",
    "advanced_vocab_usage": "> 0.3",
    "keyword_density": "Balanced",
    "pronoun_usage_count": "Contextual",
    "pronoun_density": "Balanced",
    "function_word_density": "Balanced",
    "lexical_sophistication_index": "> 0.4",
    "grammar_issues": "Lower is better",
    "readability_score": "> 60",
    "syllables_per_word": "1.4–1.8",
    "tense_consistency": "≈1",
    "answer_accuracy": "> 0.7",
    "answer_completeness": "> 0.7",
    "depth_of_knowledge": "> 0.7"
}

metric_keys_all = list(ideal_ranges.keys())
coding_metrics = ["answer_accuracy", "answer_completeness", "depth_of_knowledge"]

for i, q in enumerate(questions):
    elements.append(Paragraph(f"Q{i+1} Metrics", styles["Heading3"]))

    # Include question type as first row
    q_type = q["question_type"].lower()
    table_data = [["Metric", "Value", "Ideal Range"]]
    table_data.append(["Question Type", q_type.title(), "-"])

    # Decide which metrics to show based on question_type
    if q_type == "coding":
        metrics_to_show = coding_metrics
    else:
        metrics_to_show = metric_keys_all

    for key in metrics_to_show:
        val = q[key]
        if val is None:
            val_str = "-"
        elif isinstance(val, float):
            val_str = f"{val:.3f}"
        else:
            val_str = str(val)
        ideal = ideal_ranges.get(key, "-")
        table_data.append([key.replace("_", " ").title(), val_str, ideal])

    table = Table(table_data, colWidths=[160, 80, 180])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
        ("ALIGN", (1, 1), (-1, -1), "CENTER"),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))


# Line charts
# Line charts
chart_metrics = ["speech_rate_wpm", "avg_pitch", "pause_ratio", "loudness"]

for metric in chart_metrics:
    # Filter out invalid or None values
    values = [
        (i + 1, float(q[metric])) for i, q in enumerate(questions)
        if q[metric] is not None and isinstance(q[metric], (int, float))
    ]

    if len(values) < 2:
        elements.append(Paragraph(f"Not enough data to plot {metric.replace('_', ' ').title()} Trend.", styles["Normal"]))
        elements.append(Spacer(1, 12))
        continue  # Skip plotting

    drawing = Drawing(400, 200)
    lp = LinePlot()
    lp.x = 50
    lp.y = 50
    lp.height = 125
    lp.width = 300
    lp.data = [values]
    lp.lines[0].strokeColor = colors.darkblue
    lp.lines[0].symbol = makeMarker("FilledCircle")
    lp.joinedLines = 1
    lp.xValueAxis.valueMin = 0
    lp.xValueAxis.valueMax = len(questions) + 1
    lp.yValueAxis.valueMin = 0
    lp.yValueAxis.valueMax = max(v for _, v in values) * 1.2
    drawing.add(lp)

    title_paragraph = Paragraph(f"{metric.replace('_', ' ').title()} Trend", styles["Heading3"])
    
    # Create a single-cell table containing title and drawing stacked vertically
    content_table = Table(
        [[title_paragraph],
         [drawing]],
        colWidths=[400]  # Adjust width as needed
    )
    
    # Add border and padding to the table cell to create the box effect
    content_table.setStyle(TableStyle([
        ("BOX", (0, 0), (-1, -1), 1, colors.black),
        ("TOPPADDING", (0, 0), (-1, -1), 6),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 6),
        ("LEFTPADDING", (0, 0), (-1, -1), 6),
        ("RIGHTPADDING", (0, 0), (-1, -1), 6),
    ]))
    
    # Wrap in KeepTogether to prevent splitting across pages
    elements.append(KeepTogether([content_table]))
    elements.append(Spacer(1, 12))

# Build document
doc.build(elements, onFirstPage=add_page_footer, onLaterPages=add_page_footer)


print(f"Report generated at: {output_path}")
